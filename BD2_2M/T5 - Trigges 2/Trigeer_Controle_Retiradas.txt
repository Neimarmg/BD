CREATE TABLE Aluno (
	CdAluno serial PRIMARY KEY, 
	NomeAluno VARCHAR (50),
    CdCurso INTEGER NULL,
    VlrMensal NUMERIC NULL,
    CdCidade INTEGER NULL,
    QtdDisciplinas NUMERIC NULL,
    QtdRetirada NUMERIC NULL
)

CREATE TABLE retiradas (
	CdRetirada serial PRIMARY KEY, 
	CdLivro INTEGER NULL,
    CdAluno INTEGER NULL,
    DtRetirada NUMERIC NULL,
    DtDevolucao NUMERIC NULL,
)

CREATE TABLE Livros (
	CdLivro serial PRIMARY KEY, 
	titulo VARCHAR (50) NULL,
    QtdRetiradasTotal NUMERIC NULL,
    QtdDisponivel NUMERIC NULL,
)

--==========================<< Trigger atualiza estoque >>==================================

2. Criação de uma trigger para impedir que um aluno retire mais que 3 livros, deve atualizar a cada movimentação de retirada / devolução.

a)aluno.Qtdretirada

--Função de contagem de livros locados anterioemente
CREATE OR REPLACE FUNCTION get_locacoes(integer) 
	RETURNS integer AS $$
	DECLARE get_Contalocacoes integer;
	
	BEGIN
		SELECT INTO get_Contalocacoes
			retiradas.CdAluno, 
			COUNT(retiradas.CdLivro) AS "TotalRetiradas"		
			
			FROM retiradas
			WHERE aluno.CdAluno = $1 and retiradas.CdAluno;
		RETURN get_Contalocacoes;
	END;
	
$$ LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION atualiza_aluno() RETURNS TRIGGER AS $emp_audit$
    BEGIN
		if (get_locacoes <= 3)
		
			IF (TG_OP = 'DELETE') THEN
			
			   UPDATE retiradas set DtRetirada = DtRetirada + OLD.DtRetirada WHERE Aluno.CdAluno = OLD.Aluno.CdAluno; 
					   
			  RETURN OLD;

			ELSEIF (TG_OP = 'UPDATE') THEN
			
				UPDATE 
				retiradas set DtRetirada = DtRetirada + OLD.DtRetirada - new.DtRetirada WHERE Aluno.CdAluno = OLD.Cidade.Aluno.CdAluno;
						 
			  RETURN NEW;
	   
			ELSEIF (TG_OP = 'INSERT') THEN
			
				UPDATE retiradas set DtRetirada = DtRetirada - new.DtRetirada WHERE Aluno.CdAluno = OLD.Aluno.CdAluno; 
				   
			   RETURN NEW;
			
			END IF;
		ELSE
			RETURN "Limete de locações esgotado!"
		END IF
		
		RETURN NULL;
    
	END;
    $emp_audit$ LANGUAGE plpgsql;